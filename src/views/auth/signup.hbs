<div class="d-flex justify-content-center align-items-center">
    <div class="registration-form">
        <h4 class="form-title">Đăng ký</h4>

        {{#if isSignUp}}
        <form id="signupForm" method="post" action="/auth/signup" novalidate>
            <div class="mb-3">
                <input type="text" class="form-control" id="username" name="username" placeholder="Tên tài khoản"
                    required />
                <div id="username-feedback" class="invalid-feedback">
                </div>
            </div>

            <div class="mb-3">
                <input type="password" class="form-control" id="password" name="password" placeholder="Mật khẩu" />
                <div id="password-feedback" class="invalid-feedback">
                </div>
            </div>

            <div class="mb-3">
                <input type="password" class="form-control" id="confirmPassword" name="confirmPassword"
                    placeholder="Xác nhận mật khẩu" />
                <div id="confirm-password-feedback" class="invalid-feedback">
                </div>
            </div>

            <div class="mb-3">
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" value="" id="passwordToggle" />
                    <label class="form-check-label" for="passwordToggle">
                        Hiện mật khẩu
                    </label>
                </div>
            </div>

            <div class="mb-3">
                <input type="text" class="form-control" name="email" placeholder="Email" id="email" />
                <div id="email-feedback" class="invalid-feedback">
                </div>
            </div>

            <div class="mb-3">
                <input type="text" class="form-control" id="name" name="name" placeholder="Họ và tên" />
                <div id="name-feedback" class="invalid-feedback">
                </div>
            </div>

            <button class="btn btn-primary" id="signupBtn">Đăng ký</button>

            <div class="divider d-flex align-items-center my-4">
                <p class="text-center small mx-3 mb-0 text-muted">HOẶC</p>
            </div>

            <p id="login-link">Bạn đã có tài khoản?
                <a href="/auth/login">
                    Đăng nhập
                </a>
            </p>
        </form>

        {{else}}
        <div class="alert alert-success" role="alert">
            Chúng tôi đã gửi thông tin xác nhận đăng ký tài khoản thông qua <b>{{email}}</b>. Vui lòng xác
            nhận nhanh chóng.
        </div>

        {{/if}}
    </div>
</div>


<script>
    $(function () {
        const passwordToggle = $('#passwordToggle');
        const passwordField = $('#password');
        const confirmPasswordField = $('#confirmPassword')
        passwordToggle.on('click', function () {
            togglePassword(passwordField);
            togglePassword(confirmPasswordField);
        });

        signup();

    });

    ////////////////////////////////////

    function togglePassword(inputField) {
        const inputType = $(inputField).attr('type');
        const newType = inputType === 'password' ? 'text' : 'password';
        $(inputField).attr('type', newType);
    }
    function signup() {
        const fields = {
            username: $('#username'),
            password: $('#password'),
            confirmPassword: $('#confirmPassword'),
            email: $('#email'),
            name: $('#name')
        }
        const feedbacks = {
            username: $('#username-feedback'),
            password: $('#password-feedback'),
            confirmPassword: $('#confirm-password-feedback'),
            email: $('#email-feedback'),
            name: $('#name-feedback')
        }
        const regex = {
            allowedCharacters: /^[a-zA-Z0-9.]+$/,
            email: /^[a-zA-Z0-9_+&*-]+(?:\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\.)+[a-zA-Z]{2,}$/,
            onlyNumber: /^\d+$/
        }

        const state = {
            username: {
                isValid: true,
                message: '',
            },
            password: {
                isValid: true,
                message: ''
            },
            confirmPassword: {
                isValid: true,
                message: ''
            },
            email: {
                isValid: true,
                message: ''
            },
            name: {
                isValid: true,
                message: ''
            },
        }

        $('#signupForm').submit(function (event) {
            event.preventDefault();
            event.stopPropagation();

            const formData = {
                username: fields.username.val(),
                password: fields.password.val(),
                confirmPassword: fields.confirmPassword.val(),
                email: fields.email.val(),
                name: fields.name.val()
            };

            ////////////// Username
            if (!formData.username) {
                state.username.isValid = false;
                state.username.message = 'Nhập tên tài khoản';
            } else if (formData.username.length < 6 || formData.username.length > 30) {
                state.username.isValid = false;
                state.username.message = 'Xin lỗi, tên người dùng của bạn phải nằm trong khoảng độ dài từ giữa 6 và 30 ký tự';
            } else if (!regex.allowedCharacters.test(formData.username)) {
                state.username.isValid = false;
                state.username.message = 'Xin lỗi, chỉ được phép sử dụng các chữ cái (a-z), số và dấu chấm.';
            } else if (regex.onlyNumber.test(formData.username)) {
                state.username.isValid = false;
                state.username.message = 'Xin lỗi, tên người dùng phải có từ 8 ký tự trở lên và phải bao gồm ít nhất một chữ cái (a-z)';
            }
            else {
                $.ajax({
                    url: `/account/username-exists`,
                    method: 'POST',
                    data: {
                        username: formData.username
                    }
                })
                    .done((res) => {
                        console.log('ok')
                        state.username.isValid = true;
                        state.username.message = '';

                        // update state
                        if (state.username.isValid === false) {
                            fields.username.addClass('is-invalid');
                            feedbacks.username.text(state.username.message);
                        } else {
                            fields.username.addClass('is-valid');
                            fields.username.removeClass('is-invalid');
                            feedbacks.username.text('');
                        }
                    })
                    .fail((err) => {
                        state.username.isValid = false;
                        state.username.message = 'Tên người dùng đã được sử dụng. Hãy thử tên khác.';

                        // update state
                        if (state.username.isValid === false) {
                            fields.username.addClass('is-invalid');
                            feedbacks.username.text(state.username.message);
                        } else {
                            fields.username.addClass('is-valid');
                            fields.username.removeClass('is-invalid');
                            feedbacks.username.text('');
                        }
                    });
            }

            //////// Password
            if (!formData.password) {
                state.password.isValid = false;
                state.password.message = 'Nhập mật khẩu';
            } else if (formData.password.length < 8) {
                state.password.isValid = false;
                state.password.message = 'Sử dụng 8 ký tự trở lên cho mật khẩu của bạn';
            } else {
                state.password.isValid = true;
                state.password.message = '';
            }

            if (!formData.confirmPassword) {
                state.confirmPassword.isValid = false;
                state.confirmPassword.message = 'Xác nhận mật khẩu của bạn';
            } else if (formData.password !== formData.confirmPassword) {
                state.confirmPassword.isValid = false;
                state.confirmPassword.message = 'Các mật khẩu đã nhập không khớp. Hãy thử lại';
            } else {
                state.confirmPassword.isValid = true;
                state.confirmPassword.message = '';
            }

            if (!formData.email) {
                state.email.isValid = false;
                state.email.message = 'Nhập email';
            } else if (!regex.email.test(formData.email)) {
                state.email.isValid = false;
                state.email.message = 'Địa chỉ email không hợp lệ';
            } else {
                state.email.isValid = true;
                state.email.message = '';
            }

            if (!formData.name) {
                state.name.isValid = false;
                state.name.message = 'Nhập tên';
            } else {
                state.name.isValid = true;
                state.name.message = '';
            }

            // update state
            if (state.username.isValid === false) {
                fields.username.addClass('is-invalid');
                feedbacks.username.text(state.username.message);
            } else {
                fields.username.addClass('is-valid');
                fields.username.removeClass('is-invalid');
                feedbacks.username.text('');
            }

            if (state.password.isValid === false) {
                fields.password.addClass('is-invalid');
                feedbacks.password.text(state.password.message);
            } else {
                fields.password.addClass('is-valid');
                fields.password.removeClass('is-invalid');
                feedbacks.password.text('');
            }

            if (state.confirmPassword.isValid === false) {
                fields.confirmPassword.addClass('is-invalid');
                feedbacks.confirmPassword.text(state.confirmPassword.message);
            } else {
                fields.confirmPassword.addClass('is-valid');
                fields.confirmPassword.removeClass('is-invalid');
                feedbacks.confirmPassword.text('');
            }

            if (state.email.isValid === false) {
                fields.email.addClass('is-invalid');
                feedbacks.email.text(state.email.message);
            } else {
                fields.email.addClass('is-valid');
                fields.email.removeClass('is-invalid');
                feedbacks.email.text('');
            }

            if (state.name.isValid === false) {
                fields.name.addClass('is-invalid');
                feedbacks.name.text(state.name.message);
            } else {
                fields.name.addClass('is-valid');
                fields.name.removeClass('is-invalid');
                feedbacks.name.text('');
            }

            // Submit
            let isValid = true;
            for (const field in state) {
                if (!state[field].isValid) {
                    isValid = false;
                }
            }

            if (isValid) {
                $(this).unbind('submit').submit();
            }
        })
    }
</script>